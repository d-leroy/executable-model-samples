/*
 * generated by Xtext 2.9.2
 */
grammar InternalXPetrinet;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.diverse.sample.petrinet.xpetrinet.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.diverse.sample.petrinet.xpetrinet.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.diverse.sample.petrinet.xpetrinet.services.XPetrinetGrammarAccess;

}

@parser::members {

 	private XPetrinetGrammarAccess grammarAccess;

    public InternalXPetrinetParser(TokenStream input, XPetrinetGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Net";
   	}

   	@Override
   	protected XPetrinetGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleNet
entryRuleNet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNetRule()); }
	iv_ruleNet=ruleNet
	{ $current=$iv_ruleNet.current; }
	EOF;

// Rule Net
ruleNet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNetAccess().getNetAction_0(),
					$current);
			}
		)
		otherlv_1='Net'
		{
			newLeafNode(otherlv_1, grammarAccess.getNetAccess().getNetKeyword_1());
		}
		(
			otherlv_2='places'
			{
				newLeafNode(otherlv_2, grammarAccess.getNetAccess().getPlacesKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNetAccess().getPlacesPlaceParserRuleCall_2_1_0());
					}
					lv_places_3_0=rulePlace
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNetRule());
						}
						add(
							$current,
							"places",
							lv_places_3_0,
							"fr.inria.diverse.sample.petrinet.xpetrinet.XPetrinet.Place");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getNetAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNetAccess().getPlacesPlaceParserRuleCall_2_2_1_0());
						}
						lv_places_5_0=rulePlace
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNetRule());
							}
							add(
								$current,
								"places",
								lv_places_5_0,
								"fr.inria.diverse.sample.petrinet.xpetrinet.XPetrinet.Place");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_6='transitions'
			{
				newLeafNode(otherlv_6, grammarAccess.getNetAccess().getTransitionsKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNetAccess().getTransitionsTransitionParserRuleCall_3_1_0());
					}
					lv_transitions_7_0=ruleTransition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNetRule());
						}
						add(
							$current,
							"transitions",
							lv_transitions_7_0,
							"fr.inria.diverse.sample.petrinet.xpetrinet.XPetrinet.Transition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getNetAccess().getCommaKeyword_3_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNetAccess().getTransitionsTransitionParserRuleCall_3_2_1_0());
						}
						lv_transitions_9_0=ruleTransition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNetRule());
							}
							add(
								$current,
								"transitions",
								lv_transitions_9_0,
								"fr.inria.diverse.sample.petrinet.xpetrinet.XPetrinet.Transition");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRulePlace
entryRulePlace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlaceRule()); }
	iv_rulePlace=rulePlace
	{ $current=$iv_rulePlace.current; }
	EOF;

// Rule Place
rulePlace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPlaceAccess().getPlaceAction_0(),
					$current);
			}
		)
		otherlv_1='place'
		{
			newLeafNode(otherlv_1, grammarAccess.getPlaceAccess().getPlaceKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlaceAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlaceRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.inria.diverse.sample.petrinet.xpetrinet.XPetrinet.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='initialTokens'
			{
				newLeafNode(otherlv_3, grammarAccess.getPlaceAccess().getInitialTokensKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPlaceAccess().getInitialTokensEIntParserRuleCall_3_1_0());
					}
					lv_initialTokens_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlaceRule());
						}
						set(
							$current,
							"initialTokens",
							lv_initialTokens_4_0,
							"fr.inria.diverse.sample.petrinet.xpetrinet.XPetrinet.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	iv_ruleTransition=ruleTransition
	{ $current=$iv_ruleTransition.current; }
	EOF;

// Rule Transition
ruleTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='transition'
		{
			newLeafNode(otherlv_0, grammarAccess.getTransitionAccess().getTransitionKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransitionAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransitionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.inria.diverse.sample.petrinet.xpetrinet.XPetrinet.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getTransitionAccess().getFromKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTransitionAccess().getInputPlaceCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getTransitionAccess().getInputPlaceCrossReference_4_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6='to'
		{
			newLeafNode(otherlv_6, grammarAccess.getTransitionAccess().getToKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTransitionAccess().getOutputPlaceCrossReference_6_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_8=','
			{
				newLeafNode(otherlv_8, grammarAccess.getTransitionAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getTransitionAccess().getOutputPlaceCrossReference_7_1_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
