/*
 * generated by Xtext 2.9.2
 */
grammar InternalXPetrinet;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.inria.diverse.sample.petrinet.xpetrinet.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.inria.diverse.sample.petrinet.xpetrinet.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.inria.diverse.sample.petrinet.xpetrinet.services.XPetrinetGrammarAccess;

}
@parser::members {
	private XPetrinetGrammarAccess grammarAccess;

	public void setGrammarAccess(XPetrinetGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleNet
entryRuleNet
:
{ before(grammarAccess.getNetRule()); }
	 ruleNet
{ after(grammarAccess.getNetRule()); } 
	 EOF 
;

// Rule Net
ruleNet 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNetAccess().getGroup()); }
		(rule__Net__Group__0)
		{ after(grammarAccess.getNetAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlace
entryRulePlace
:
{ before(grammarAccess.getPlaceRule()); }
	 rulePlace
{ after(grammarAccess.getPlaceRule()); } 
	 EOF 
;

// Rule Place
rulePlace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlaceAccess().getGroup()); }
		(rule__Place__Group__0)
		{ after(grammarAccess.getPlaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransition
entryRuleTransition
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransitionAccess().getGroup()); }
		(rule__Transition__Group__0)
		{ after(grammarAccess.getTransitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group__0__Impl
	rule__Net__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getNetAction_0()); }
	()
	{ after(grammarAccess.getNetAccess().getNetAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group__1__Impl
	rule__Net__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getNetKeyword_1()); }
	'Net'
	{ after(grammarAccess.getNetAccess().getNetKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group__2__Impl
	rule__Net__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getGroup_2()); }
	(rule__Net__Group_2__0)?
	{ after(grammarAccess.getNetAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getGroup_3()); }
	(rule__Net__Group_3__0)?
	{ after(grammarAccess.getNetAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Net__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_2__0__Impl
	rule__Net__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getPlacesKeyword_2_0()); }
	'places'
	{ after(grammarAccess.getNetAccess().getPlacesKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_2__1__Impl
	rule__Net__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getPlacesAssignment_2_1()); }
	(rule__Net__PlacesAssignment_2_1)
	{ after(grammarAccess.getNetAccess().getPlacesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getGroup_2_2()); }
	(rule__Net__Group_2_2__0)*
	{ after(grammarAccess.getNetAccess().getGroup_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Net__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_2_2__0__Impl
	rule__Net__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getCommaKeyword_2_2_0()); }
	','
	{ after(grammarAccess.getNetAccess().getCommaKeyword_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getPlacesAssignment_2_2_1()); }
	(rule__Net__PlacesAssignment_2_2_1)
	{ after(grammarAccess.getNetAccess().getPlacesAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Net__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_3__0__Impl
	rule__Net__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getTransitionsKeyword_3_0()); }
	'transitions'
	{ after(grammarAccess.getNetAccess().getTransitionsKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_3__1__Impl
	rule__Net__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getTransitionsAssignment_3_1()); }
	(rule__Net__TransitionsAssignment_3_1)
	{ after(grammarAccess.getNetAccess().getTransitionsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getGroup_3_2()); }
	(rule__Net__Group_3_2__0)*
	{ after(grammarAccess.getNetAccess().getGroup_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Net__Group_3_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_3_2__0__Impl
	rule__Net__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_3_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getCommaKeyword_3_2_0()); }
	','
	{ after(grammarAccess.getNetAccess().getCommaKeyword_3_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_3_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Net__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__Group_3_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNetAccess().getTransitionsAssignment_3_2_1()); }
	(rule__Net__TransitionsAssignment_3_2_1)
	{ after(grammarAccess.getNetAccess().getTransitionsAssignment_3_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Place__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Place__Group__0__Impl
	rule__Place__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlaceAccess().getPlaceAction_0()); }
	()
	{ after(grammarAccess.getPlaceAccess().getPlaceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Place__Group__1__Impl
	rule__Place__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlaceAccess().getPlaceKeyword_1()); }
	'place'
	{ after(grammarAccess.getPlaceAccess().getPlaceKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Place__Group__2__Impl
	rule__Place__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlaceAccess().getNameAssignment_2()); }
	(rule__Place__NameAssignment_2)
	{ after(grammarAccess.getPlaceAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Place__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlaceAccess().getGroup_3()); }
	(rule__Place__Group_3__0)?
	{ after(grammarAccess.getPlaceAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Place__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Place__Group_3__0__Impl
	rule__Place__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlaceAccess().getInitialTokensKeyword_3_0()); }
	'initialTokens'
	{ after(grammarAccess.getPlaceAccess().getInitialTokensKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Place__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlaceAccess().getInitialTokensAssignment_3_1()); }
	(rule__Place__InitialTokensAssignment_3_1)
	{ after(grammarAccess.getPlaceAccess().getInitialTokensAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }
	'transition'
	{ after(grammarAccess.getTransitionAccess().getTransitionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getNameAssignment_1()); }
	(rule__Transition__NameAssignment_1)
	{ after(grammarAccess.getTransitionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getFromKeyword_2()); }
	'from'
	{ after(grammarAccess.getTransitionAccess().getFromKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__3__Impl
	rule__Transition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getInputAssignment_3()); }
	(rule__Transition__InputAssignment_3)
	{ after(grammarAccess.getTransitionAccess().getInputAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__4__Impl
	rule__Transition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getGroup_4()); }
	(rule__Transition__Group_4__0)*
	{ after(grammarAccess.getTransitionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__5__Impl
	rule__Transition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getToKeyword_5()); }
	'to'
	{ after(grammarAccess.getTransitionAccess().getToKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__6__Impl
	rule__Transition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getOutputAssignment_6()); }
	(rule__Transition__OutputAssignment_6)
	{ after(grammarAccess.getTransitionAccess().getOutputAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getGroup_7()); }
	(rule__Transition__Group_7__0)*
	{ after(grammarAccess.getTransitionAccess().getGroup_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group_4__0__Impl
	rule__Transition__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getTransitionAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getInputAssignment_4_1()); }
	(rule__Transition__InputAssignment_4_1)
	{ after(grammarAccess.getTransitionAccess().getInputAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group_7__0__Impl
	rule__Transition__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getCommaKeyword_7_0()); }
	','
	{ after(grammarAccess.getTransitionAccess().getCommaKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getOutputAssignment_7_1()); }
	(rule__Transition__OutputAssignment_7_1)
	{ after(grammarAccess.getTransitionAccess().getOutputAssignment_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Net__PlacesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNetAccess().getPlacesPlaceParserRuleCall_2_1_0()); }
		rulePlace
		{ after(grammarAccess.getNetAccess().getPlacesPlaceParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__PlacesAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNetAccess().getPlacesPlaceParserRuleCall_2_2_1_0()); }
		rulePlace
		{ after(grammarAccess.getNetAccess().getPlacesPlaceParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__TransitionsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNetAccess().getTransitionsTransitionParserRuleCall_3_1_0()); }
		ruleTransition
		{ after(grammarAccess.getNetAccess().getTransitionsTransitionParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Net__TransitionsAssignment_3_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNetAccess().getTransitionsTransitionParserRuleCall_3_2_1_0()); }
		ruleTransition
		{ after(grammarAccess.getNetAccess().getTransitionsTransitionParserRuleCall_3_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlaceAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getPlaceAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Place__InitialTokensAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlaceAccess().getInitialTokensEIntParserRuleCall_3_1_0()); }
		ruleEInt
		{ after(grammarAccess.getPlaceAccess().getInitialTokensEIntParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getTransitionAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__InputAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getInputPlaceCrossReference_3_0()); }
		(
			{ before(grammarAccess.getTransitionAccess().getInputPlaceEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getTransitionAccess().getInputPlaceEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getTransitionAccess().getInputPlaceCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__InputAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getInputPlaceCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getTransitionAccess().getInputPlaceEStringParserRuleCall_4_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getTransitionAccess().getInputPlaceEStringParserRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getTransitionAccess().getInputPlaceCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__OutputAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getOutputPlaceCrossReference_6_0()); }
		(
			{ before(grammarAccess.getTransitionAccess().getOutputPlaceEStringParserRuleCall_6_0_1()); }
			ruleEString
			{ after(grammarAccess.getTransitionAccess().getOutputPlaceEStringParserRuleCall_6_0_1()); }
		)
		{ after(grammarAccess.getTransitionAccess().getOutputPlaceCrossReference_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__OutputAssignment_7_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getOutputPlaceCrossReference_7_1_0()); }
		(
			{ before(grammarAccess.getTransitionAccess().getOutputPlaceEStringParserRuleCall_7_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getTransitionAccess().getOutputPlaceEStringParserRuleCall_7_1_0_1()); }
		)
		{ after(grammarAccess.getTransitionAccess().getOutputPlaceCrossReference_7_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
